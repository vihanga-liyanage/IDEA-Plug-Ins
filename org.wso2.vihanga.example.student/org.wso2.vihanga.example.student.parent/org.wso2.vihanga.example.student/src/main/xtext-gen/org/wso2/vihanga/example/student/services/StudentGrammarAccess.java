/*
 * generated by Xtext 2.9.2
 */
package org.wso2.vihanga.example.student.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StudentGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.wso2.vihanga.example.student.Student.Model");
		private final Assignment cStudentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStudentsStudentParserRuleCall_0 = (RuleCall)cStudentsAssignment.eContents().get(0);
		
		//Model:
		//	students+=Student*;
		@Override public ParserRule getRule() { return rule; }
		
		//students+=Student*
		public Assignment getStudentsAssignment() { return cStudentsAssignment; }
		
		//Student
		public RuleCall getStudentsStudentParserRuleCall_0() { return cStudentsStudentParserRuleCall_0; }
	}
	public class StudentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.wso2.vihanga.example.student.Student.Student");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStudentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cAgeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAgeINTTerminalRuleCall_3_0 = (RuleCall)cAgeAssignment_3.eContents().get(0);
		private final Assignment cAddressAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAddressAddressParserRuleCall_4_0 = (RuleCall)cAddressAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Student:
		//	'Student' id=ID name=STRING age=INT address=Address ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Student' id=ID name=STRING age=INT address=Address ';'
		public Group getGroup() { return cGroup; }
		
		//'Student'
		public Keyword getStudentKeyword_0() { return cStudentKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//age=INT
		public Assignment getAgeAssignment_3() { return cAgeAssignment_3; }
		
		//INT
		public RuleCall getAgeINTTerminalRuleCall_3_0() { return cAgeINTTerminalRuleCall_3_0; }
		
		//address=Address
		public Assignment getAddressAssignment_4() { return cAddressAssignment_4; }
		
		//Address
		public RuleCall getAddressAddressParserRuleCall_4_0() { return cAddressAddressParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.wso2.vihanga.example.student.Student.Address");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStreetAddressKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStreetAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStreetAddressSTRINGTerminalRuleCall_3_0 = (RuleCall)cStreetAddressAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCityKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCitySTRINGTerminalRuleCall_6_0 = (RuleCall)cCityAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPostalCodeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPostalCodeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPostalCodeINTTerminalRuleCall_9_0 = (RuleCall)cPostalCodeAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Address:
		//	'Address' '{'
		//	'StreetAddress' streetAddress=STRING ','
		//	'City' city=STRING ','
		//	'PostalCode' postalCode=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Address' '{' 'StreetAddress' streetAddress=STRING ',' 'City' city=STRING ',' 'PostalCode' postalCode=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'Address'
		public Keyword getAddressKeyword_0() { return cAddressKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'StreetAddress'
		public Keyword getStreetAddressKeyword_2() { return cStreetAddressKeyword_2; }
		
		//streetAddress=STRING
		public Assignment getStreetAddressAssignment_3() { return cStreetAddressAssignment_3; }
		
		//STRING
		public RuleCall getStreetAddressSTRINGTerminalRuleCall_3_0() { return cStreetAddressSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'City'
		public Keyword getCityKeyword_5() { return cCityKeyword_5; }
		
		//city=STRING
		public Assignment getCityAssignment_6() { return cCityAssignment_6; }
		
		//STRING
		public RuleCall getCitySTRINGTerminalRuleCall_6_0() { return cCitySTRINGTerminalRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'PostalCode'
		public Keyword getPostalCodeKeyword_8() { return cPostalCodeKeyword_8; }
		
		//postalCode=INT
		public Assignment getPostalCodeAssignment_9() { return cPostalCodeAssignment_9; }
		
		//INT
		public RuleCall getPostalCodeINTTerminalRuleCall_9_0() { return cPostalCodeINTTerminalRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	
	
	private final ModelElements pModel;
	private final StudentElements pStudent;
	private final AddressElements pAddress;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StudentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStudent = new StudentElements();
		this.pAddress = new AddressElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.wso2.vihanga.example.student.Student".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	students+=Student*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Student:
	//	'Student' id=ID name=STRING age=INT address=Address ';';
	public StudentElements getStudentAccess() {
		return pStudent;
	}
	
	public ParserRule getStudentRule() {
		return getStudentAccess().getRule();
	}
	
	//Address:
	//	'Address' '{'
	//	'StreetAddress' streetAddress=STRING ','
	//	'City' city=STRING ','
	//	'PostalCode' postalCode=INT
	//	'}';
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
