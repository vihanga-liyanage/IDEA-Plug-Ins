/*
 * generated by Xtext 2.9.2
 */
package org.wso2.vihanga.example.student.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.wso2.vihanga.example.student.services.StudentGrammarAccess;
import org.wso2.vihanga.example.student.student.Address;
import org.wso2.vihanga.example.student.student.Model;
import org.wso2.vihanga.example.student.student.Student;
import org.wso2.vihanga.example.student.student.StudentPackage;

@SuppressWarnings("all")
public class StudentSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StudentGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StudentPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StudentPackage.ADDRESS:
				sequence_Address(context, (Address) semanticObject); 
				return; 
			case StudentPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case StudentPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Address returns Address
	 *
	 * Constraint:
	 *     (streetAddress=STRING city=STRING postalCode=INT)
	 */
	protected void sequence_Address(ISerializationContext context, Address semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.ADDRESS__STREET_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.ADDRESS__STREET_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.ADDRESS__CITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.ADDRESS__CITY));
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.ADDRESS__POSTAL_CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.ADDRESS__POSTAL_CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddressAccess().getStreetAddressSTRINGTerminalRuleCall_3_0(), semanticObject.getStreetAddress());
		feeder.accept(grammarAccess.getAddressAccess().getCitySTRINGTerminalRuleCall_6_0(), semanticObject.getCity());
		feeder.accept(grammarAccess.getAddressAccess().getPostalCodeINTTerminalRuleCall_9_0(), semanticObject.getPostalCode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     students+=Student+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Student returns Student
	 *
	 * Constraint:
	 *     (id=ID name=STRING age=INT address=Address)
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.STUDENT__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.STUDENT__ID));
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.STUDENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.STUDENT__NAME));
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.STUDENT__AGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.STUDENT__AGE));
			if (transientValues.isValueTransient(semanticObject, StudentPackage.Literals.STUDENT__ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StudentPackage.Literals.STUDENT__ADDRESS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStudentAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStudentAccess().getAgeINTTerminalRuleCall_3_0(), semanticObject.getAge());
		feeder.accept(grammarAccess.getStudentAccess().getAddressAddressParserRuleCall_4_0(), semanticObject.getAddress());
		feeder.finish();
	}
	
	
}
