/*
 * generated by Xtext 2.9.2
 */
grammar PsiInternalStudent;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.wso2.vihanga.example.student.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.wso2.vihanga.example.student.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.wso2.vihanga.example.student.idea.lang.StudentElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.wso2.vihanga.example.student.services.StudentGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected StudentGrammarAccess grammarAccess;

	protected StudentElementTypeProvider elementTypeProvider;

	public PsiInternalStudentParser(PsiBuilder builder, TokenStream input, StudentElementTypeProvider elementTypeProvider, StudentGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Model";
	}

}

//Entry rule entryRuleModel
entryRuleModel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getModelElementType()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getModel_StudentsStudentParserRuleCall_0ElementType());
			}
			lv_students_0_0=ruleStudent
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRuleStudent
entryRuleStudent returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getStudentElementType()); }
	iv_ruleStudent=ruleStudent
	{ $current=$iv_ruleStudent.current; }
	EOF;

// Rule Student
ruleStudent returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getStudent_StudentKeyword_0ElementType());
		}
		otherlv_0='Student'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getStudent_IdIDTerminalRuleCall_1_0ElementType());
				}
				lv_id_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_id_1_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getStudent_NameSTRINGTerminalRuleCall_2_0ElementType());
				}
				lv_name_2_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_2_0);
				}
			)
		)
		(
			(
				{
					markLeaf(elementTypeProvider.getStudent_AgeINTTerminalRuleCall_3_0ElementType());
				}
				lv_age_3_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_age_3_0);
				}
			)
		)
		(
			(
				{
					markComposite(elementTypeProvider.getStudent_AddressAddressParserRuleCall_4_0ElementType());
				}
				lv_address_4_0=ruleAddress
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getStudent_SemicolonKeyword_5ElementType());
		}
		otherlv_5=';'
		{
			doneLeaf(otherlv_5);
		}
	)
;

//Entry rule entryRuleAddress
entryRuleAddress returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAddressElementType()); }
	iv_ruleAddress=ruleAddress
	{ $current=$iv_ruleAddress.current; }
	EOF;

// Rule Address
ruleAddress returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getAddress_AddressKeyword_0ElementType());
		}
		otherlv_0='Address'
		{
			doneLeaf(otherlv_0);
		}
		{
			markLeaf(elementTypeProvider.getAddress_LeftCurlyBracketKeyword_1ElementType());
		}
		otherlv_1='{'
		{
			doneLeaf(otherlv_1);
		}
		{
			markLeaf(elementTypeProvider.getAddress_StreetAddressKeyword_2ElementType());
		}
		otherlv_2='StreetAddress'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getAddress_StreetAddressSTRINGTerminalRuleCall_3_0ElementType());
				}
				lv_streetAddress_3_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_streetAddress_3_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAddress_CommaKeyword_4ElementType());
		}
		otherlv_4=','
		{
			doneLeaf(otherlv_4);
		}
		{
			markLeaf(elementTypeProvider.getAddress_CityKeyword_5ElementType());
		}
		otherlv_5='City'
		{
			doneLeaf(otherlv_5);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getAddress_CitySTRINGTerminalRuleCall_6_0ElementType());
				}
				lv_city_6_0=RULE_STRING
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_city_6_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAddress_CommaKeyword_7ElementType());
		}
		otherlv_7=','
		{
			doneLeaf(otherlv_7);
		}
		{
			markLeaf(elementTypeProvider.getAddress_PostalCodeKeyword_8ElementType());
		}
		otherlv_8='PostalCode'
		{
			doneLeaf(otherlv_8);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getAddress_PostalCodeINTTerminalRuleCall_9_0ElementType());
				}
				lv_postalCode_9_0=RULE_INT
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_postalCode_9_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getAddress_RightCurlyBracketKeyword_10ElementType());
		}
		otherlv_10='}'
		{
			doneLeaf(otherlv_10);
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
